/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_client_2fd_5fmessages_2eproto__INCLUDED
#define PROTOBUF_C_client_2fd_5fmessages_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _ClientRequest ClientRequest;
typedef struct _ClientRequestReply ClientRequestReply;
typedef struct _Query Query;
typedef struct _QueryReplySuccess QueryReplySuccess;
typedef struct _QueryReplyFailure QueryReplyFailure;
typedef struct _Push Push;
typedef struct _PushReply PushReply;


/* --- enums --- */


/* --- messages --- */

struct  _ClientRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData name;
};
#define CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_request__descriptor) \
    , {0,NULL} }


struct  _ClientRequestReply
{
  ProtobufCMessage base;
  ProtobufCBinaryData name;
  uint32_t code;
};
#define CLIENT_REQUEST_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_request_reply__descriptor) \
    , {0,NULL}, 0 }


struct  _Query
{
  ProtobufCMessage base;
  ProtobufCBinaryData reply_addr;
  uint32_t reply_port;
  ProtobufCBinaryData name;
};
#define QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query__descriptor) \
    , {0,NULL}, 0, {0,NULL} }


struct  _QueryReplySuccess
{
  ProtobufCMessage base;
  ProtobufCBinaryData name;
};
#define QUERY_REPLY_SUCCESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query_reply_success__descriptor) \
    , {0,NULL} }


struct  _QueryReplyFailure
{
  ProtobufCMessage base;
  ProtobufCBinaryData name;
};
#define QUERY_REPLY_FAILURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query_reply_failure__descriptor) \
    , {0,NULL} }


struct  _Push
{
  ProtobufCMessage base;
  ProtobufCBinaryData reply_addr;
  uint32_t reply_port;
  ProtobufCBinaryData name;
};
#define PUSH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&push__descriptor) \
    , {0,NULL}, 0, {0,NULL} }


struct  _PushReply
{
  ProtobufCMessage base;
  ProtobufCBinaryData name;
};
#define PUSH_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&push_reply__descriptor) \
    , {0,NULL} }


/* ClientRequest methods */
void   client_request__init
                     (ClientRequest         *message);
size_t client_request__get_packed_size
                     (const ClientRequest   *message);
size_t client_request__pack
                     (const ClientRequest   *message,
                      uint8_t             *out);
size_t client_request__pack_to_buffer
                     (const ClientRequest   *message,
                      ProtobufCBuffer     *buffer);
ClientRequest *
       client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_request__free_unpacked
                     (ClientRequest *message,
                      ProtobufCAllocator *allocator);
/* ClientRequestReply methods */
void   client_request_reply__init
                     (ClientRequestReply         *message);
size_t client_request_reply__get_packed_size
                     (const ClientRequestReply   *message);
size_t client_request_reply__pack
                     (const ClientRequestReply   *message,
                      uint8_t             *out);
size_t client_request_reply__pack_to_buffer
                     (const ClientRequestReply   *message,
                      ProtobufCBuffer     *buffer);
ClientRequestReply *
       client_request_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_request_reply__free_unpacked
                     (ClientRequestReply *message,
                      ProtobufCAllocator *allocator);
/* Query methods */
void   query__init
                     (Query         *message);
size_t query__get_packed_size
                     (const Query   *message);
size_t query__pack
                     (const Query   *message,
                      uint8_t             *out);
size_t query__pack_to_buffer
                     (const Query   *message,
                      ProtobufCBuffer     *buffer);
Query *
       query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query__free_unpacked
                     (Query *message,
                      ProtobufCAllocator *allocator);
/* QueryReplySuccess methods */
void   query_reply_success__init
                     (QueryReplySuccess         *message);
size_t query_reply_success__get_packed_size
                     (const QueryReplySuccess   *message);
size_t query_reply_success__pack
                     (const QueryReplySuccess   *message,
                      uint8_t             *out);
size_t query_reply_success__pack_to_buffer
                     (const QueryReplySuccess   *message,
                      ProtobufCBuffer     *buffer);
QueryReplySuccess *
       query_reply_success__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query_reply_success__free_unpacked
                     (QueryReplySuccess *message,
                      ProtobufCAllocator *allocator);
/* QueryReplyFailure methods */
void   query_reply_failure__init
                     (QueryReplyFailure         *message);
size_t query_reply_failure__get_packed_size
                     (const QueryReplyFailure   *message);
size_t query_reply_failure__pack
                     (const QueryReplyFailure   *message,
                      uint8_t             *out);
size_t query_reply_failure__pack_to_buffer
                     (const QueryReplyFailure   *message,
                      ProtobufCBuffer     *buffer);
QueryReplyFailure *
       query_reply_failure__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query_reply_failure__free_unpacked
                     (QueryReplyFailure *message,
                      ProtobufCAllocator *allocator);
/* Push methods */
void   push__init
                     (Push         *message);
size_t push__get_packed_size
                     (const Push   *message);
size_t push__pack
                     (const Push   *message,
                      uint8_t             *out);
size_t push__pack_to_buffer
                     (const Push   *message,
                      ProtobufCBuffer     *buffer);
Push *
       push__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   push__free_unpacked
                     (Push *message,
                      ProtobufCAllocator *allocator);
/* PushReply methods */
void   push_reply__init
                     (PushReply         *message);
size_t push_reply__get_packed_size
                     (const PushReply   *message);
size_t push_reply__pack
                     (const PushReply   *message,
                      uint8_t             *out);
size_t push_reply__pack_to_buffer
                     (const PushReply   *message,
                      ProtobufCBuffer     *buffer);
PushReply *
       push_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   push_reply__free_unpacked
                     (PushReply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ClientRequest_Closure)
                 (const ClientRequest *message,
                  void *closure_data);
typedef void (*ClientRequestReply_Closure)
                 (const ClientRequestReply *message,
                  void *closure_data);
typedef void (*Query_Closure)
                 (const Query *message,
                  void *closure_data);
typedef void (*QueryReplySuccess_Closure)
                 (const QueryReplySuccess *message,
                  void *closure_data);
typedef void (*QueryReplyFailure_Closure)
                 (const QueryReplyFailure *message,
                  void *closure_data);
typedef void (*Push_Closure)
                 (const Push *message,
                  void *closure_data);
typedef void (*PushReply_Closure)
                 (const PushReply *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor client_request__descriptor;
extern const ProtobufCMessageDescriptor client_request_reply__descriptor;
extern const ProtobufCMessageDescriptor query__descriptor;
extern const ProtobufCMessageDescriptor query_reply_success__descriptor;
extern const ProtobufCMessageDescriptor query_reply_failure__descriptor;
extern const ProtobufCMessageDescriptor push__descriptor;
extern const ProtobufCMessageDescriptor push_reply__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_client_2fd_5fmessages_2eproto__INCLUDED */
